import numpy as np
import numpy.fft as fft

"""
def inter_1Dv7(coords, values, pos):
    return reconstruction(fft.fft(values[:-1]), len(values) - 1, coords[-1], pos)

def reconstruction(values_fft, Ni, c_max, pos):
   value_inter = np.real(values_fft[0])
   for f in range(1, Ni // 2 + 1):
      # print(f)
      w = f * 2 * np.pi / (c_max)
      # print(w)
      value_inter += 2 * np.real(values_fft[f]) * np.cos(w * pos)
      value_inter -= 2 * np.imag(values_fft[f]) * np.sin(w * pos)
   
   value_inter /= Ni
   return value_inter

def inter_1Dv7_1(x_dom, values, pos):
   values_fft = fft.fft(values)
   value_inter = np.real(values_fft[0])
   for f in range(1, Ni // 2):
      w = f * 2 * np.pi / (x_dom[1] - x_dom[0])
      value_inter += 2 * np.real(values_fft[f]) * np.cos(w * pos)
      value_inter -= 2 * np.imag(values_fft[f]) * np.sin(w * pos)
   
   value_inter /= Ni
   return value_inter
"""
   
def inter_1Dv9(values1D_fft, kx, x_pos):
   value_inter = np.real(values1D_fft[0])
   for k in range(1, len(kx)):
      # print(kx[k])
      value_inter += 2 * np.real(values1D_fft[k]) * np.cos(kx[k] * x_pos)
      value_inter -= 2 * np.imag(values1D_fft[k]) * np.sin(kx[k] * x_pos)
   value_inter /= (len(kx) - 1) * 2
   return value_inter

Ni = 100
x_dom = [- np.pi, np.pi]

x = np.linspace(x_dom[0], x_dom[1], Ni, endpoint = False)
values1D = np.zeros(shape = (Ni))

for i in range(0, Ni):
   values1D[i] = np.exp(np.sin(x[i]) - np.sin(np.exp(x[i])))

kx = np.array(list(range(0, Ni//2 + 1))) * 2 * np.pi / (x_dom[1] - x_dom[0])
# kx =  np.array(list(range(0, Ni//2 + 1)) + list(range(-Ni//2 + 1, 0))) * 2 * np.pi / (x_dom[1] - x_dom[0])
print(kx)
values1D_fft = fft.fftn(values1D)

inter_v7 = np.zeros(len(x))
inter_v9 = np.zeros(len(x))

for i in range(len(x)):
   # inter_v7[i] = inter_1Dv7(x, values1D, x[i])
   inter_v9[i] = inter_1Dv9(values1D_fft, kx, x[i])

import matplotlib.pyplot as plt
# plt.plot(x_v7, values1D_v7, '-ro')
plt.plot(x, values1D, '-bo')
# plt.plot(x, inter_v7, '--ro')
plt.plot(x, inter_v9, ':bo')
plt.show()